CHIP ALUProcess
{
    IN a[4], b[4], sums, ands, xors, ors, hiLo, resLoad, carryIn;
    OUT out[8], carryOut;


PARTS:
	/*Trigger for lo storage*/
	Not(in=hiLo,out=nHiLo);
	And(a=nHiLo,b=resLoad,out=loHiTRIG);


	And(a=resLoad,b=hiLo,out=TRIG);
	/*CORE*/

	Add4C(a=a,b=b,carryOut=carryOut2);

	Mux(a=carryIn,b=carryDly,sel=hiLo,out=inCarry);	/*	need to find trig when carryout is pos	*/
ALUcore(a=a,b=b,carryIn=inCarry,sums=sums,ands=ands,xors=xors,ors=ors,out[0]=ALU0,out[1]=ALU1,out[2]=ALU2,out[3]=ALU3,carryOut=preCarry);
	
	/*CarryInBUFFER*/	
	Bit(in=preCarry,load=resLoad,out=carryDly);

	Bit(in=inCarry,load=hiLo,out=carryOut1);
	Mux(a=carryOut1,b=inCarry,sel=hiLo,out=carryOut);	/*create trigger, such that when hiLo AND "PHASE 1" = 1111*/

	/*	REG 4's	*/	
	DMux(in=ALU0,a=ab0,b=ab4,sel=hiLo);
	DMux(in=ALU1,a=ab1,b=ab5,sel=hiLo);
	DMux(in=ALU2,a=ab2,b=ab6,sel=hiLo);
	DMux(in=ALU3,a=ab3,b=ab7,sel=hiLo);

	/*	PHASE 1		*/
/*REG1a*/Bit(in=ab0,load=loHiTRIG,out=out[0],out=T1);
/*REG1a*/Bit(in=ab1,load=loHiTRIG,out=out[1],out=T2);
/*REG1a*/Bit(in=ab2,load=loHiTRIG,out=out[2],out=T3);
/*REG1a*/Bit(in=ab3,load=loHiTRIG,out=out[3],out=T4);
	/*subTRIG_1(AND)*/
	And(a=T1,b=T2,out=T12);
	And(a=T12,b=T3,out=T123);
	And(a=T123,b=T4,out=T1234);
	/*posTRIG(AND)*/
	And(a=T1234,b=TRIG,out=posTRIG);

	/*	PHASE 2		*/
/*REG2a*/Bit(in=ab4,load=TRIG,out=out[4]);
/*REG2a*/Bit(in=ab5,load=TRIG,out=out[5]);
/*REG2a*/Bit(in=ab6,load=TRIG,out=out[6]);
/*REG2a*/Bit(in=ab7,load=TRIG,out=out[7]);

	/*	PHASE 1:	 STR	*/
/*Register8(in[0]=P10,in[1]=P11,in[2]=P12,in[3]=P13,in[4]=P20,in[5]=P21,in[6]=P22,in[7]=P23,load=resLoad,out=out);*/









}
